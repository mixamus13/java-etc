package com.mixamus.interview.diffference_map_flatmap;

import lombok.Value;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class AppMap {

    public static void main(String... args) {
        // making the array list object
        ArrayList<String> fruit = new ArrayList<>();
        fruit.add("Apple");
        fruit.add("mango");
        fruit.add("pineapple");
        fruit.add("kiwi");
        System.out.println("List of fruit-" + fruit);

        // lets use map() to convert list of fruit
        List list = fruit.stream()
                //.map(String::toUpperCase)
                .map(s -> s.length())
                .toList();
        System.out.println("List generated by map-" + list);

        List<Integer> listOfIntegers = Stream.of("1", "2", "3", "4")
                .map(Integer::valueOf)
                .toList();

        System.out.println("list Of Integers = " + listOfIntegers);
    }

}


class AppFlatMap {
    public static void main(String... args) {
        List<List<Integer>> number = new ArrayList<>();

        // adding the elements to number arraylist
        number.add(Arrays.asList(1, 2));
        number.add(Arrays.asList(3, 4));
        number.add(Arrays.asList(5, 6));
        number.add(Arrays.asList(7, 8));

        System.out.println("List of list-" + number);

        // using flatmap() to flatten this list
        var flatList = number.stream()
                //.flatMap(list -> list.stream())
                .flatMap(Collection::stream)
                //.flatMap(integers -> Arrays.stream(integers.toArray()))
                .toList();

        // printing the list
        System.out.println("List generate by flatMap-" + flatList);


        List evens = Arrays.asList(2, 4, 6);
        List odds = Arrays.asList(3, 5, 7);
        List primes = Arrays.asList(2, 3, 5, 7, 11);

        List numbers = Stream.of(evens, odds, primes)
                .flatMap(Collection::stream)
                .toList();

        System.out.println("flattend list: " + numbers);
    }
}

class CollectToMap {
    public static void main(String... args) {
        List<Book> bookList = List.of(
                new Book("The Fellowship of the Ring", 1954, "0395489318"),
                new Book("The Ring", 2000, "6666689318"),
                new Book("The Two Towers", 1953, "0345339711"),
                new Book("The Return of the King", 1955, "0618129111"),
                new Book("The Return", 1955, "0618129999"),
                new Book("Dianetica", 1978, "131313133")
        );


        bookList.forEach(System.out::println);

        System.out.println("to set ---> ");
        var toSet = bookList.stream()
                .map(Book::getReleaseYear)
                .collect(Collectors.toSet());
        toSet.forEach(System.out::println);

        System.out.println("to map ---> ");
        var collect = bookList.stream()
                .collect(Collectors.toMap(Book::getIsbn, Book::getReleaseYear));
        collect.entrySet().forEach(System.out::println);


        System.out.println("Sorted to map ---> ");
        var bookTreeMap = bookList.stream()
                .collect(Collectors.toMap(Book::getReleaseYear, Function.identity(), (book, book2) -> book, TreeMap::new));
        bookTreeMap.entrySet().forEach(System.out::println);
    }
}

@Value
class Book {
    String name;
    int releaseYear;
    String isbn;
}
